name: "SonarCloud Setup Helper"
description: "Ayuda a configurar un proyecto para SonarCloud desde cero"

steps:
  - name: "Verificar tipo de proyecto"
    command: |
      echo "üîç Detectando tipo de proyecto..."
      
      if (Test-Path "pom.xml") {
        echo "‚úÖ Proyecto Maven detectado"
        $projectType = "maven"
      } elseif (Test-Path "build.gradle" -or Test-Path "build.gradle.kts") {
        echo "‚úÖ Proyecto Gradle detectado"
        $projectType = "gradle"
      } elseif (Test-Path "package.json") {
        echo "‚úÖ Proyecto Node.js/JavaScript detectado"
        $projectType = "nodejs"
      } else {
        echo "‚ùå Tipo de proyecto no reconocido"
        echo "üí° Este workflow est√° optimizado para Maven, Gradle o Node.js"
        exit 1
      }
      
      echo "üè∑Ô∏è Tipo de proyecto: $projectType"

  - name: "Verificar configuraci√≥n existente"
    command: |
      echo "üó∫Ô∏è Verificando configuraci√≥n actual..."
      
      if (Test-Path "sonar-project.properties") {
        echo "‚úÖ Ya existe sonar-project.properties"
        echo "üìù Contenido actual:"
        Get-Content "sonar-project.properties" | Where-Object { $_ -match "sonar\.(organization|projectKey|projectName)" }
      } else {
        echo "‚ö†Ô∏è No existe sonar-project.properties"
        echo "üìù Necesitar√°s crear este archivo"
      }
      
      if (Test-Path "pom.xml") {
        $jacocoPlugin = Select-String -Path "pom.xml" -Pattern "jacoco-maven-plugin" -Quiet
        $sonarPlugin = Select-String -Path "pom.xml" -Pattern "sonar-maven-plugin" -Quiet
        
        if ($jacocoPlugin) {
          echo "‚úÖ Plugin JaCoCo encontrado en pom.xml"
        } else {
          echo "‚ö†Ô∏è Plugin JaCoCo no encontrado en pom.xml"
        }
        
        if ($sonarPlugin) {
          echo "‚úÖ Plugin SonarCloud encontrado en pom.xml"
        } else {
          echo "‚ö†Ô∏è Plugin SonarCloud no encontrado en pom.xml"
        }
      }

  - name: "Proporcionar gu√≠a de configuraci√≥n"
    command: |
      echo ""
      echo "üìã ===== GU√çA DE CONFIGURACI√ìN ====="
      echo ""
      
      if (-not (Test-Path "sonar-project.properties")) {
        echo "üìÑ 1. Crear sonar-project.properties:"
        echo "   sonar.organization=TU_ORGANIZACION"
        echo "   sonar.projectKey=TU_PROYECTO_KEY"
        echo "   sonar.projectName=Nombre de tu proyecto"
        echo "   sonar.projectVersion=1.0"
        echo "   sonar.sources=src/main/java"
        echo "   sonar.tests=src/test/java"
        echo "   sonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml"
        echo ""
      }
      
      echo "üîë 2. Configurar token de SonarCloud:"
      echo "   - Ve a https://sonarcloud.io/account/security/"
      echo "   - Genera un nuevo token"
      echo "   - Ejecuta: `$env:SONAR_TOKEN='tu_token_aqui'`"
      echo ""
      
      if (Test-Path "pom.xml") {
        echo "‚öôÔ∏è 3. Para proyectos Maven, aseg√∫rate de tener estos plugins en pom.xml:"
        echo "   - jacoco-maven-plugin (para cobertura)"
        echo "   - sonar-maven-plugin (para an√°lisis)"
        echo ""
      }
      
      echo "üöÄ 4. Una vez configurado, ejecuta:"
      echo "   warp-cli workflow run sonarcloud-coverage"
      echo ""
      echo "üìö Para m√°s informaci√≥n: https://docs.sonarcloud.io/"

  - name: "Probar conexi√≥n b√°sica"
    command: |
      echo "üåê Probando conectividad con SonarCloud..."
      
      try {
        $response = Invoke-WebRequest -Uri "https://sonarcloud.io/api/system/status" -Method GET -TimeoutSec 10
        if ($response.StatusCode -eq 200) {
          echo "‚úÖ SonarCloud es accesible"
        }
      } catch {
        echo "‚ö†Ô∏è No se pudo conectar a SonarCloud"
        echo "   Verifica tu conexi√≥n a internet"
      }
      
      if ($env:SONAR_TOKEN) {
        echo "‚úÖ Variable SONAR_TOKEN est√° definida"
      } else {
        echo "‚ö†Ô∏è Variable SONAR_TOKEN no est√° definida"
        echo "   Recuerda configurarla antes de ejecutar el an√°lisis"
      }

