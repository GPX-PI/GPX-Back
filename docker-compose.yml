# =========================================
# DOCKER COMPOSE - gpx RACING DEVELOPMENT
# =========================================

version: "3.8"

services:
  # ========== BASE DE DATOS POSTGRESQL ==========
  postgres:
    image: postgres:15-alpine
    container_name: gpx-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: gpx_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/init-scripts:/docker-entrypoint-initdb.d
    networks:
      - gpx-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d gpx_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ========== APLICACIÓN SPRING BOOT ==========
  gpx-api:
    build:
      context: .
      dockerfile: Dockerfile
      target: runtime
    container_name: gpx-api
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      # Perfil de Spring Boot
      SPRING_PROFILES_ACTIVE: dev

      # Base de datos
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/gpx_db
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: password

      # JWT
      JWT_SECRET: dev-jwt-secret-key-for-development-only-not-for-production-use-longer-key

      # OAuth2 (usar variables reales en .env)
      GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID:-tu-google-client-id}
      GOOGLE_CLIENT_SECRET: ${GOOGLE_CLIENT_SECRET:-tu-google-client-secret}

      # CORS
      CORS_ALLOWED_ORIGINS: http://localhost:3000,http://localhost:3001

      # URL frontend
      FRONTEND_REDIRECT_URL: http://localhost:3000/

      # Configuración JVM
      JAVA_OPTS: -Xmx1g -Xms512m -XX:+UseG1GC
    ports:
      - "8080:8080"
    volumes:
      - app_uploads:/app/uploads
      - app_logs:/app/logs
    networks:
      - gpx-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # ========== PGADMIN (OPCIONAL PARA DESARROLLO) ==========
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: gpx-pgadmin
    restart: unless-stopped
    depends_on:
      - postgres
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@gpx.com
      PGADMIN_DEFAULT_PASSWORD: admin123
      PGADMIN_CONFIG_SERVER_MODE: "False"
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    networks:
      - gpx-network
    profiles:
      - admin # Solo se inicia si se especifica el perfil: docker-compose --profile admin up

# ========== VOLÚMENES PERSISTENTES ==========
volumes:
  postgres_data:
    name: gpx_postgres_data
  pgadmin_data:
    name: gpx_pgadmin_data
  app_uploads:
    name: gpx_app_uploads
  app_logs:
    name: gpx_app_logs

# ========== RED INTERNA ==========
networks:
  gpx-network:
    name: gpx-network
    driver: bridge
