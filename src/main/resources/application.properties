#spring.datasource.url=jdbc:mysql://localhost:3306/gpx_db?createDatabaseIfNotExist=true
#spring.datasource.username=root
#spring.datasource.password=root
#spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
#spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL8Dialect
#spring.jpa.hibernate.ddl-auto=update
#spring.jpa.show-sql=true


#spring.datasource.url=jdbc:postgresql://localhost:5432/gpx_db
#spring.datasource.driverClassName=org.postgresql.Driver
#spring.datasource.username=postgres
#spring.datasource.password=password
## Dialecto de PostgreSQL para Hibernate
#spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect
spring.datasource.url=jdbc:postgresql://dpg-d1273ibipnbc73e71js0-a.ohio-postgres.render.com:5432/gpx_db_71tj
spring.datasource.driverClassName=org.postgresql.Driver
spring.datasource.username=renderuser
spring.datasource.password=hKchp9FamjDoQ0JQrP72zTEkoagSZm12
# Dialecto de PostgreSQL para Hibernate
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect


# Otras configuraciones opcionales
spring.jpa.show-sql=false
spring.jpa.hibernate.ddl-auto=update
spring.jpa.properties.hibernate.format_sql=true
spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true
spring.servlet.multipart.max-file-size=10MB
spring.servlet.multipart.max-request-size=10MB

# Server Configuration for Render
server.port=${PORT:8080}

# Configuracion Google OAuth2
spring.security.oauth2.client.registration.google.client-id=${GOOGLE_CLIENT_ID:tu-google-client-id}
spring.security.oauth2.client.registration.google.client-secret=${GOOGLE_CLIENT_SECRET:tu-google-client-secret}
spring.security.oauth2.client.registration.google.scope=openid,profile,email
spring.security.oauth2.client.registration.google.redirect-uri=${GOOGLE_OAUTH2_REDIRECT_URI:http://localhost:8080/login/oauth2/code/google}
spring.security.oauth2.client.provider.google.authorization-uri=https://accounts.google.com/o/oauth2/auth
spring.security.oauth2.client.provider.google.token-uri=https://oauth2.googleapis.com/token
spring.security.oauth2.client.provider.google.user-info-uri=https://www.googleapis.com/oauth2/v2/userinfo
spring.security.oauth2.client.provider.google.user-name-attribute=sub

# URL base para redirecciones del frontend
app.oauth2.frontend-redirect-url=${FRONTEND_REDIRECT_URL:http://localhost:3000/}

# ========== CONFIGURACIÓN DE JWT ==========
jwt.secret=${JWT_SECRET:tu-clave-secreta-super-larga-y-segura-para-jwt-tokens}
jwt.expiration=36000

# ========== CONFIGURACIÓN DE CORS ==========
cors.allowed-origins=${CORS_ALLOWED_ORIGINS:http://localhost:3000}