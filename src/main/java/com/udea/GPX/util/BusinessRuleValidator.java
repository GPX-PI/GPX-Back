package com.udea.gpx.util;

import org.springframework.stereotype.Component;

import com.udea.gpx.model.Event;
import com.udea.gpx.model.EventVehicle;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.temporal.ChronoUnit;
import java.util.List;

/**
 * Utilidad para validar reglas de negocio espec√≠ficas del sistema gpx Racing
 */
@Component
public class BusinessRuleValidator {

  private static final Logger logger = LoggerFactory.getLogger(BusinessRuleValidator.class);

  // Constantes para reglas de negocio
  private static final int MAX_DAYS_FOR_REGISTRATION = 365; // 1 a√±o
  private static final int MIN_DAYS_BEFORE_START = 1; // 1 d√≠a antes
  private static final int DEFAULT_MAX_VEHICLES = 100;
  private static final boolean ENFORCE_CAPACITY_LIMITS = true;

  /**
   * Valida que las fechas de un evento sean coherentes y cumplan las reglas de
   * negocio
   */
  public void validateEventDates(Event event) {
    logger.debug("üîç BusinessRuleValidator.validateEventDates - Validando fechas del evento: {}",
        event.getName());

    if (event.getStartDate() == null || event.getEndDate() == null) {
      throw new IllegalArgumentException("Las fechas de inicio y fin del evento son obligatorias");
    }

    if (event.getStartDate().isAfter(event.getEndDate())) {
      throw new IllegalArgumentException("La fecha de inicio no puede ser posterior a la fecha de fin");
    }

    // No permitir crear eventos que hayan terminado hace m√°s de un a√±o
    LocalDate oneYearAgo = LocalDate.now().minusYears(1);
    if (event.getEndDate().isBefore(oneYearAgo)) {
      throw new IllegalArgumentException("No se pueden crear eventos que terminaron hace m√°s de un a√±o");
    }

    // Validar que el evento no sea demasiado lejano (m√°ximo 2 a√±os en el futuro)
    LocalDate twoYearsFromNow = LocalDate.now().plusYears(2);
    if (event.getStartDate().isAfter(twoYearsFromNow)) {
      throw new IllegalArgumentException("No se pueden crear eventos con m√°s de 2 a√±os de anticipaci√≥n");
    }

    // Validar duraci√≥n razonable del evento (m√°ximo 30 d√≠as)
    long eventDuration = ChronoUnit.DAYS.between(event.getStartDate(), event.getEndDate());
    if (eventDuration > 30) {
      throw new IllegalArgumentException("La duraci√≥n del evento no puede exceder 30 d√≠as");
    }

    logger.debug("‚úÖ BusinessRuleValidator.validateEventDates - Fechas v√°lidas, duraci√≥n: {} d√≠as", eventDuration);
  }

  /**
   * Valida que un veh√≠culo se pueda registrar en un evento
   */
  public void validateVehicleRegistration(Event event, Long vehicleId) {
    logger.debug(
        "üîç BusinessRuleValidator.validateVehicleRegistration - Validando registro del veh√≠culo {}",
        vehicleId);

    if (event == null) {
      throw new IllegalArgumentException("El evento no existe");
    }

    logger.debug("üîç BusinessRuleValidator.validateVehicleRegistration - Validando evento {}", event.getId());

    // No permitir registro en eventos pasados
    if (event.getEndDate().isBefore(LocalDate.now())) {
      throw new IllegalArgumentException("No se puede registrar veh√≠culos en eventos que ya han terminado");
    }

    // Validar que el registro no sea demasiado temprano
    long daysUntilEvent = ChronoUnit.DAYS.between(LocalDate.now(), event.getStartDate());
    if (daysUntilEvent > MAX_DAYS_FOR_REGISTRATION) {
      throw new IllegalArgumentException(
          String.format("No se puede registrar veh√≠culos con m√°s de %d d√≠as de anticipaci√≥n",
              MAX_DAYS_FOR_REGISTRATION));
    }

    // Validar tiempo m√≠nimo antes del inicio
    if (daysUntilEvent < MIN_DAYS_BEFORE_START) {
      throw new IllegalArgumentException(
          String.format("Los registros se cierran %d d√≠a(s) antes del inicio del evento",
              MIN_DAYS_BEFORE_START));
    }

    logger.debug("‚úÖ BusinessRuleValidator.validateVehicleRegistration - Registro v√°lido, {} d√≠as antes del evento",
        daysUntilEvent);
  }

  /**
   * Valida la capacidad m√°xima de un evento
   */
  public void validateEventCapacity(Event event, List<EventVehicle> currentRegistrations) {
    logger.debug("üîç BusinessRuleValidator.validateEventCapacity - Validando capacidad del evento {}",
        event.getId());

    if (!ENFORCE_CAPACITY_LIMITS) {
      logger.debug("‚úÖ BusinessRuleValidator.validateEventCapacity - L√≠mites de capacidad deshabilitados");
      return;
    }

    int maxCapacity = DEFAULT_MAX_VEHICLES;
    int currentCount = currentRegistrations.size();

    if (currentCount >= maxCapacity) {
      throw new IllegalArgumentException(
          String.format("El evento ha alcanzado su capacidad m√°xima de %d veh√≠culos", maxCapacity));
    }

    // Advertencia cuando se est√° cerca del l√≠mite (90%)
    if (currentCount >= maxCapacity * 0.9) {
      logger.warn("‚ö†Ô∏è BusinessRuleValidator.validateEventCapacity - Evento {} cerca del l√≠mite: {}/{}",
          event.getId(), currentCount, maxCapacity);
    }

    logger.debug("‚úÖ BusinessRuleValidator.validateEventCapacity - Capacidad disponible: {}/{}",
        currentCount, maxCapacity);
  }

  /**
   * Valida que una fecha/hora de resultado de etapa sea v√°lida
   */
  public void validateStageResultTimestamp(LocalDateTime timestamp, Event event) {
    logger.debug("üîç BusinessRuleValidator.validateStageResultTimestamp - Validando timestamp de resultado");

    if (timestamp == null) {
      throw new IllegalArgumentException("La fecha y hora del resultado es obligatoria");
    }

    // Validar que el timestamp est√© dentro del rango del evento
    if (event != null) {
      LocalDate timestampDate = timestamp.toLocalDate();
      if (timestampDate.isBefore(event.getStartDate()) ||
          timestampDate.isAfter(event.getEndDate().plusDays(1))) {
        throw new IllegalArgumentException(
            "La fecha del resultado debe estar dentro del per√≠odo del evento");
      }
    }

    logger.debug("‚úÖ BusinessRuleValidator.validateStageResultTimestamp - Timestamp v√°lido");
  }

  /**
   * Valida que un usuario pueda registrarse en un evento espec√≠fico
   */
  public void validateUserEventRegistration(Long userId, Event event) {
    logger.debug(
        "üîç BusinessRuleValidator.validateUserEventRegistration - Validando registro de usuario {}",
        userId);

    if (userId == null || userId <= 0) {
      throw new IllegalArgumentException("ID de usuario inv√°lido");
    }

    // Validar que el evento permita nuevos registros
    validateVehicleRegistration(event, null);

    logger.debug("‚úÖ BusinessRuleValidator.validateUserEventRegistration - Registro de usuario v√°lido");
  }

  /**
   * Valida coordenadas GPS
   */
  public void validateGpsCoordinates(Double latitude, Double longitude) {
    logger.debug("üîç BusinessRuleValidator.validateGpsCoordinates - Validando coordenadas GPS");

    if (latitude != null && (latitude < -90.0 || latitude > 90.0)) {
      throw new IllegalArgumentException("La latitud debe estar entre -90 y 90 grados");
    }

    if (longitude != null && (longitude < -180.0 || longitude > 180.0)) {
      throw new IllegalArgumentException("La longitud debe estar entre -180 y 180 grados");
    }

    // Validar que las coordenadas no sean (0,0) a menos que sea intencional
    if (latitude != null && longitude != null &&
        latitude == 0.0 && longitude == 0.0) {
      logger.warn(
          "‚ö†Ô∏è BusinessRuleValidator.validateGpsCoordinates - Coordenadas (0,0) detectadas, verificar si es intencional");
    }

    logger.debug("‚úÖ BusinessRuleValidator.validateGpsCoordinates - Coordenadas v√°lidas");
  }

  /**
   * Valida que el nombre del evento sea apropiado
   */
  public void validateEventName(String eventName) {
    logger.debug("üîç BusinessRuleValidator.validateEventName - Validando nombre del evento");

    if (eventName == null || eventName.trim().isEmpty()) {
      throw new IllegalArgumentException("El nombre del evento es obligatorio");
    }

    if (eventName.length() < 3) {
      throw new IllegalArgumentException("El nombre del evento debe tener al menos 3 caracteres");
    }

    if (eventName.length() > 50) {
      throw new IllegalArgumentException("El nombre del evento no puede exceder 50 caracteres");
    }

    // Evitar nombres con solo n√∫meros
    if (eventName.matches("^\\d+$")) {
      throw new IllegalArgumentException("El nombre del evento no puede contener solo n√∫meros");
    }

    logger.debug("‚úÖ BusinessRuleValidator.validateEventName - Nombre v√°lido: {}", eventName);
  }

  /**
   * Valida los detalles del evento
   */
  public void validateEventDetails(String details) {
    logger.debug("üîç BusinessRuleValidator.validateEventDetails - Validando detalles del evento");

    if (details != null && details.length() > 400) {
      throw new IllegalArgumentException("Los detalles del evento no pueden exceder 400 caracteres");
    }

    logger.debug("‚úÖ BusinessRuleValidator.validateEventDetails - Detalles v√°lidos");
  }

  /**
   * Valida la ubicaci√≥n del evento
   */
  public void validateEventLocation(String location) {
    logger.debug("üîç BusinessRuleValidator.validateEventLocation - Validando ubicaci√≥n del evento");

    if (location == null || location.trim().isEmpty()) {
      throw new IllegalArgumentException("La ubicaci√≥n del evento es obligatoria");
    }

    if (location.length() > 50) {
      throw new IllegalArgumentException("La ubicaci√≥n del evento no puede exceder 50 caracteres");
    }

    logger.debug("‚úÖ BusinessRuleValidator.validateEventLocation - Ubicaci√≥n v√°lida: {}", location);
  }

  /**
   * Validaci√≥n completa de un evento antes de creaci√≥n/actualizaci√≥n
   */
  public void validateCompleteEvent(Event event) {
    logger.debug("üîç BusinessRuleValidator.validateCompleteEvent - Validaci√≥n completa del evento {}",
        event.getName());

    validateEventName(event.getName());
    validateEventLocation(event.getLocation());
    validateEventDetails(event.getDetails());
    validateEventDates(event);

    logger.debug("‚úÖ BusinessRuleValidator.validateCompleteEvent - Evento v√°lido completamente");
  }
}